
from itertools import count
from random import randint


#1. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —É–¥–∞–ª—è—é—â—É—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ —Å–ª–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "–∞–±–≤".

lst = ('–∞–±–≤ —Å–∏–Ω–∏–π –∫—Ä–∞—Å–Ω—ã–π –∞–±–≤–≥–¥–µ–π–∫–∞ –∑–µ–ª–µ–Ω—ã–π')
lst2 = list(x for x in lst.split() if '–∞–±–≤' not in x)
print(lst2)

#2 –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∏–≥—Ä—ã —Å –∫–æ–Ω—Ñ–µ—Ç–∞–º–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Ç–∏–≤ —á–µ–ª–æ–≤–µ–∫–∞.

# –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏: –ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç 2021 –∫–æ–Ω—Ñ–µ—Ç–∞. –ò–≥—Ä–∞—é—Ç –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ –¥–µ–ª–∞—è —Ö–æ–¥ –¥—Ä—É–≥ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∞. 
# –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∂–µ—Ä–µ–±—å—ë–≤–∫–æ–π. –ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ —á–µ–º 28 –∫–æ–Ω—Ñ–µ—Ç. 
# –í—Å–µ –∫–æ–Ω—Ñ–µ—Ç—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ—Å—Ç–∞—é—Ç—Å—è —Å–¥–µ–ª–∞–≤—à–µ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥. 
# –°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ñ–µ—Ç—ã —É —Å–≤–æ–µ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞?

# a) –î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—É –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞
# b) –ü–æ–¥—É–º–∞–π—Ç–µ –∫–∞–∫ –Ω–∞–¥–µ–ª–∏—Ç—å –±–æ—Ç–∞ ""–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º""

flag = True if randint(0, 1) == 0 else False
candyes = 2021
move = 28

def move_man():
    while True:
            man = int(input('\n–í–∞—à —Ö–æ–¥: '))
            if 0 < man <= move:
                return man 
            else:
                print('–ù–µ –∂—É–ª—å–Ω–∏—á–∞–π—Ç–µ üò∏. –í–∑—è—Ç—å –Ω—É–∂–Ω–æ –æ—Ç 1-–π –¥–æ 28-–º–∏ –∫–æ–Ω—Ñ–µ—Ç.')

def move_bot():
    return randint(1, move)

def play(candyes, flag):
    print('******* –ò–≥—Ä–∞ –≤ –∫–æ–Ω—Ñ–µ—Ç—ã ********\n–í–∑—è—Ç—å –º–æ–∂–Ω–æ –¥–æ 28 –∫–æ–Ω—Ñ–µ—Ç –∑–∞ —Ä–∞–∑.')
    while True:
        if flag:
            candyes -= move_man()
            print(f'–û—Å—Ç–∞–ª–æ—Å—å {candyes} –∫–æ–Ω—Ñ–µ—Ç')
            flag = False
        else:
            b = candyes - (move + 1) if move*2 >= candyes >= move + 1 else move_bot()
            candyes -= b
            print(f'\n–ë–æ—Ç –≤–∑—è–ª {b} –∫–æ–Ω—Ñ–µ—Ç.\n–û—Å—Ç–∞–ª–æ—Å—å {candyes} üç≠üç¨')
            flag = True

        if candyes <= move:
            print('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã!', end= ' ')
            print('–í—ã –≤—ã–∏–≥—Ä—ã–ª–∏üéâ‚ú®') if flag else print('–í—ã –ø—Ä–æ–∏–≥—Ä—ã–ª–∏‚òπ')
            break

while True:     
    print("\033[H\033[J")
    play(candyes, flag)
    repeat = int(input('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–≥—Ä—É?(–¥–∞ - 1, –Ω–µ—Ç - 0):'))
    if repeat == 1:
        play(candyes, flag)  
    else: break

#3 –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∏–≥—Ä—ã –≤ ""–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"".

tic_tac_toe = [['‚Ä¢', '‚Ä¢', '‚Ä¢'], ['‚Ä¢', '‚Ä¢', '‚Ä¢'], ['‚Ä¢', '‚Ä¢', '‚Ä¢']]
man = 'x'
bot = '0'

def print_field(tic_tac_toe):
    print('  1   2   3')
    for i in range(len(tic_tac_toe)):
        print(i + 1, end= ' ')
        print(*tic_tac_toe[i], sep=' | ')
        print(' -----------')

def move_man_play_tic_tac_toe(tic_tac_toe):
    while True:
        x,y = map(int,input('–í–∞—à —Ö–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ').split())       
        if 1 <= x <= 3 and 1 <= x <= 3 and '‚Ä¢' in tic_tac_toe[y - 1][x - 1]:
            tic_tac_toe[y - 1][x - 1] = 'x'
            break

def move_bot_play_tic_tac_toe(tic_tac_toe):
    for i in range(len(tic_tac_toe)):
        for j in range(0, 3):
            if '‚Ä¢' in tic_tac_toe[i][j]:
                tic_tac_toe[i][j] = '0'
                if check(bot) == 2:
                    print_field(tic_tac_toe)
                    return
                else: 
                    tic_tac_toe[i][j] = '‚Ä¢'

    for i in range(len(tic_tac_toe)):
        for j in range(0, 3):
            if '‚Ä¢' in tic_tac_toe[i][j]:
                tic_tac_toe[i][j] = 'x'
                if check(man) == 2:
                    tic_tac_toe[i][j] = '0'
                    print_field(tic_tac_toe)
                    return
                else: 
                    tic_tac_toe[i][j] = '‚Ä¢'

    while True:
        lst = [randint(0, 2) for _ in range(2)]
        if '‚Ä¢' in tic_tac_toe[lst[0]][lst[1]]:
            tic_tac_toe[lst[0]][lst[1]] = '0'
            print_field(tic_tac_toe)
            break

def check(player): 
    if tic_tac_toe[0].count(player) == 3: return 2
    if tic_tac_toe[1].count(player)== 3: return 2
    if tic_tac_toe[2].count(player) == 3: return 2
    if '‚Ä¢' not in [element for a_list in tic_tac_toe for element in a_list]: return 1
    if tic_tac_toe[0][0] == player and tic_tac_toe[1][1] == player and tic_tac_toe[2][2] == player: return 2
    if tic_tac_toe[0][2] == player and tic_tac_toe[1][1] == player and tic_tac_toe[2][0] == player: return 2
    if tic_tac_toe[0][0] == player and tic_tac_toe[1][0] == player and tic_tac_toe[2][0] == player: return 2
    if tic_tac_toe[0][1] == player and tic_tac_toe[1][1] == player and tic_tac_toe[2][1] == player: return 2
    if tic_tac_toe[0][2] == player and tic_tac_toe[1][2] == player and tic_tac_toe[2][2] == player: return 2
    return 0

def play_tic_tac_toe():
    print('******* –ö—Ä–µ—Å—Ç–∏–∫–∏‚ùå –Ω–æ–ª–∏–∫–∏‚≠ï ********')
    while True:
        move_man_play_tic_tac_toe(tic_tac_toe)
        if check(man) == 1:
            print_field(tic_tac_toe)
            print('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã! –ù–∏—á—å—è.')
            break
        if check(man) == 2:
            print_field(tic_tac_toe)
            print('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏üëèüéâü•á.')
            break

        move_bot_play_tic_tac_toe(tic_tac_toe)
        if check(bot) == 1:
            # print_field(tic_tac_toe)
            print('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã! –ù–∏—á—å—è.')
            break
        if check(bot) == 2:
            # print_field(tic_tac_toe)
            print('–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏üòø.')
            break

while True:     
    print("\033[H\033[J")
    play_tic_tac_toe()
    repeat2 = int(input('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–≥—Ä—É?(–¥–∞ - 1, –Ω–µ—Ç - 0):'))
    if repeat2 == 0:
        break

# –†–µ–∞–ª–∏–∑—É–π—Ç–µ RLE –∞–ª–≥–æ—Ä–∏—Ç–º: —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –º–æ–¥—É–ª—å —Å–∂–∞—Ç–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
# –í—Ö–æ–¥–Ω—ã–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö

def compression(file_name):
    with open(file_name, 'r') as file:
        data_in_file = list(file.read())

    element = data_in_file[0]
    encoding = ''
    coun = 0
    for i in data_in_file:
        if element == i:
            coun += 1
        else:
            encoding += str(coun) + element
            element = i
            coun = 1
    encoding += str(coun) + element
    return encoding


def recovery(file_name):
    with open(file_name, 'r') as file:
        data_in_file = list(file.read())
    encoding = ''
    num = 0
    for value in data_in_file:
        if value.isdigit():
            num = int(value)
        else:
            encoding += value*num
    return encoding


print(compression('2.txt'))
print(recovery('3.txt'))



