# 1) Задайте список из нескольких чисел. Напишите программу, которая найдёт сумму элементов списка, стоящих на нечётной позиции.
# Пример:
# - [2, 3, 5, 9, 3] -> на нечётных позициях элементы 3 и 9, ответ: 12

def fun1(lst):
    a = 0
    for i in range(len(lst)):
        if i % 2 != 0:
            a += lst[i]
    return a
lst_1 = [2, 3, 5, 9, 3]
print(fun1(lst_1))


# 2) Напишите программу, которая найдёт произведение пар чисел списка. Парой считаем первый и последний элемент, второй и предпоследний и т.д.
# Пример:
# - [2, 3, 4, 5, 6] => [12, 15, 16];
# - [6, 5, 4, 3, 2]
# - [2, 3, 5, 6] => [12, 15]

lst_2 = [2, 3, 4, 5, 6]

def fun2(lst):
    lst_revers = lst.copy()
    lst_revers.reverse()
    if len(lst) % 2 == 0: 
        r = len(lst) // 2 
    else: 
        r = len(lst) // 2 + 1
    lst_res = []
    for i in range(0, r):
        lst_res.append(lst[i] * lst_revers[i])
    return lst_res

print(fun2(lst_2))


# 3)Задайте список из вещественных чисел. Напишите программу, которая найдёт разницу между максимальным и минимальным значением дробной части элементов.
# Пример:
# - [1.1, 1.2, 3.1, 5, 10.01] => 0.19

lst_3 = [1.1, 1.2, 3.1, 5, 10.01]

def fun_sort(lst):
    return sorted(lst)

def fun3(lst):
    lst_new = []
    for i in lst:
        if i % 1 != 0:
           lst_new.append(round(i % 1, 3))
    
    return fun_sort(lst_new)[-1] - fun_sort(lst_new)[0]

print(fun3(lst_3))

# 4)Напишите программу, которая будет преобразовывать десятичное число в двоичное.
# Пример:
# - 45 -> 101101
# - 3 -> 11
# - 2 -> 10

x = 45

def fun4(a):
    l = []
    while a > 0:
       l.append(a % 2)
       a = int((a - (a % 2)) / 2)
    l.reverse()
    return l

print(fun4(x))

# 5) Задайте число. Составьте список чисел Фибоначчи, в том числе для отрицательных индексов.
# Пример:
# - для k = 8 список будет выглядеть так: [-21 ,13, -8, 5, −3, 2, −1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21] 

k = 8
l =[]

def fun5(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == -1:
        return 1
    elif n > 1:
        return fun5(n - 1) + fun5(n - 2)
    elif n < -1:
        return - fun5(n + 1) + fun5(n + 2)

for i in range(-k, k + 1):
    l.append(fun5(i))

print(l)